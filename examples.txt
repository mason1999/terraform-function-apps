resource "azurerm_storage_account" "example" {
  name                            = var.function_app_storage_account_name
  resource_group_name             = var.function_app_resource_group_name
  location                        = var.location
  account_tier                    = "Standard"
  account_replication_type        = "LRS"
  shared_access_key_enabled       = false
  public_network_access_enabled   = true # Note that for this one, table storage doesn't respond well to disabling public network access.
  default_to_oauth_authentication = true
  network_rules {
    default_action = "Deny"
    ip_rules       = var.function_app_storage_account_allowed_ip_addresses
    bypass         = ["None"]
  }
  routing {
    publish_internet_endpoints  = false
    publish_microsoft_endpoints = false
    choice                      = "MicrosoftRouting"
  }

  blob_properties {
    versioning_enabled            = true
    change_feed_enabled           = true
    change_feed_retention_in_days = 50
    last_access_time_enabled      = true
    delete_retention_policy {
      days                     = 100
      permanent_delete_enabled = false
    }
    container_delete_retention_policy {
      days = 20
    }
    restore_policy {
      days = 49
    }
    default_service_version = "2023-01-03"
  }
  access_tier                     = "Hot"
  allow_nested_items_to_be_public = false
  tags                            = var.tags
}


# Step 1: this is the function app backend
# This configuration allows the storage account to talk to it's back end storage account with access keys (no MI). public access is disabled from storage account. private endpoint for storage account is enabled for file service.
# Vnet integration is enabled for the function app.
# app settings are configured for the secured storage account file share.

# Moreover, to access the backend storage account for other useful operations we also open up all the other services

resource "azurerm_windows_function_app" "fa_testingapp" {
  name                = "fa-masonapp"
  resource_group_name = var.function_app_resource_group_name
  location            = var.location

  storage_account_name            = azurerm_storage_account.function_app_storage_account.name
  storage_account_access_key      = azurerm_storage_account.function_app_storage_account.primary_access_key
  key_vault_reference_identity_id = azurerm_user_assigned_identity.default_mi.id

  service_plan_id           = azurerm_service_plan.asp_testingapp.id
  virtual_network_subnet_id = var.function_app_subnet_id

  functions_extension_version = "~4"
  https_only                  = true
  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.default_mi.id]
  }

  app_settings = {

    AzureWebJobsStorage__credential      = "managedidentity"
    AzureWebJobsStorage__clientId        = azurerm_user_assigned_identity.default_mi.client_id
    AzureWebJobsStorage__accountName     = azurerm_storage_account.function_app_storage_account.name
    AzureWebJobsStorage__blobServiceUri  = "https://${azurerm_storage_account.function_app_storage_account.name}.blob.core.windows.net"  # I don't think this is necessary if AzureWebJobsStorage_accountName is set
    AzureWebJobsStorage__queueServiceUri = "https://${azurerm_storage_account.function_app_storage_account.name}.queue.core.windows.net" # I don't think this is necessary if AzureWebJobsStorage_accountName is set
    AzureWebJobsStorage__tableServiceUri = "https://${azurerm_storage_account.function_app_storage_account.name}.table.core.windows.net" # I don't think this is necessary if AzureWebJobsStorage_accountName is set

    WEBSITE_CONTENTOVERVNET                  = 1                                                                                                                                                                                               # This needs to be enabled to restrict storage account to vnet. The vnetContentShareEnabled in site_config doesn't exist yet.
    WEBSITE_CONTENTSHARE                     = "function-content"                                                                                                                                                                              # The name of the function share which the functions use to store function app code
    WEBSITE_CONTENTAZUREFILECONNECTIONSTRING = "DefaultEndpointsProtocol=https;AccountName=${azurerm_storage_account.function_app_storage_account.name};AccountKey=${azurerm_storage_account.function_app_storage_account.primary_access_key}" # Connection string for storage account where the function app code is stored.
  }
  site_config {
    application_stack {
      dotnet_version              = "v8.0"
      use_dotnet_isolated_runtime = true
    }
    vnet_route_all_enabled = true # This replaces the legacy app_setting WEBSITE_VNET_ROUTE_ALL. Route all outbound traffic through vnet.
  }
  tags = var.tags
}


##################################################
# Function App Managed Identity RBAC
##################################################
resource "azurerm_role_assignment" "blob_data_contributor" {
  scope                = azurerm_storage_account.function_app_storage_account.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.default_mi.principal_id
}

resource "azurerm_role_assignment" "table_data_contributor" {
  scope                = azurerm_storage_account.shared_storage_account.id
  role_definition_name = "Storage Table Data Contributor"
  principal_id         = azurerm_user_assigned_identity.default_mi.principal_id

}

resource "azurerm_role_assignment" "queue_data_contributor" {
  scope                = azurerm_storage_account.shared_storage_account.id
  role_definition_name = "Storage Table Data Contributor"
  principal_id         = azurerm_user_assigned_identity.default_mi.principal_id
}

resource "azurerm_role_assignment" "key_vault_administrator" {
  scope                = azurerm_key_vault.shared_key_vault.id
  role_definition_name = "Key Vault Administrator"
  principal_id         = azurerm_user_assigned_identity.default_mi.principal_id
}


# Note that as it is set up it can also resolve these dns names too
nslookup masonfunctionappstore001.privatelink.blob.core.windows.net
nslookup masonfunctionappstore001.privatelink.file.core.windows.net
nslookup masonsharedstorage000000.privatelink.file.core.windows.net
nslookup masonsharedstorage000000.privatelink.queue.core.windows.net
nslookup masonsharedstorage000000.privatelink.table.core.windows.net
nslookup mason-shared-key-vault-1.privatelink.vaultcore.azure.net



# Step 2: configure private endpoint for function app. This allows for inbound traffic. This allows us to upload the functions in the function app via machines on the private network.
